{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Geom/Point.ts","webpack:///./src/Utils/Timer.ts","webpack:///./src/Display/Stage.ts","webpack:///./src/Display/Color.ts","webpack:///./src/Display/Container.ts","webpack:///./src/Geom/Transform.ts","webpack:///./src/Display/Sprite.ts","webpack:///./src/Display/BlendMode.ts","webpack:///./src/Display/AnchorType.ts","webpack:///./src/nano.ts","webpack:///./src/Display/Spatial.ts","webpack:///./src/Geom/Matrix.ts","webpack:///./src/Display/Bound.ts","webpack:///./src/Display/MovieClip.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Point","x","y","this","add","subtract","multiply","divide","scale","scalar","dot","reflection","normal","clone","dotN","invert","normalize","length","Number","EPSILON","invLength","squaredLength","Math","sqrt","set","toString","toFixed","Timer","deltaSeconds","Color_1","Container_1","Timer_1","Stage","_clearColor","Color","_framerate","_debug","_lastUpdate","_accumulator","_updateInterval","init","width","height","clearColor","framerate","debug","_instance","instance","_canvas","document","createElement","_context","getContext","_root","Container","body","appendChild","clear","Date","now","addEventListeners","updateAnimationFrame","play","_isPaused","pause","canvas","onclick","_onClick","onmousedown","_onMouseDown","onmouseup","_onMouseUp","onmousemove","_onMouseMove","ontouchstart","_onTouchStart","ontouchend","_onTouchEnd","window","onblur","_onBlur","onfocus","_onFocus","e","console","log","_isFocussed","domElement","requestAnimationFrame","currentTime","delta","update","applicationTime","resetCanvasState","draw","drawDebug","resetTransform","globalAlpha","imageSmoothingEnabled","globalCompositeOperation","fillStyle","toHexRGB","fillRect","red","green","blue","alpha","_red","_green","_blue","_alpha","floor","padStart","toHexRGBA","_super","_this","_children","__extends","dispose","removeAllChildren","addChild","spatial","lastIndexOf","parent","push","removeChild","index","splice","_i","_a","child","updateWorldData","Spatial","Point_1","Matrix_1","Transform","_scale","ONE","_rotation","Matrix","IDENTITY","_translation","ZERO","_matrix","_isDirty","setScale","setTranslate","setRotate","radians","cos","sin","lhs","rhs","matrix","compose","decompose","BlendMode_1","Stage_1","AnchorType_1","Sprite","smoothing","blendMode","BlendMode","SOURCE_OVER","pivot","_width","_height","_targetCanvas","_targetContext","graphics","_image","onload","onerror","src","_mask","initiator","redraw","context","worldTransform","setTransform","m00","m10","m01","m11","m02","m12","target","drawImage","ctx","clearRect","_tint","SOURCE_ATOP","DESTINATION_IN","halfWidth","halfHeight","AnchorType","TOP_LEFT","TOP_CENTER","TOP_RIGHT","CENTER_LEFT","CENTER","CENTER_RIGHT","BOTTOM_LEFT","BOTTOM_CENTER","BOTTOM_RIGHT","Sprite_1","MovieClip_1","stage","bunny","anchor","image","tint","rotationSpeed","star","COLOR_BURN","root","frames","mc","MovieClip","Transform_1","Bound_1","transform","_worldBoundIsDirty","_worldTransformIsDirty","_parent","_worldBound","Bound","velocity","_x","_y","_scaleX","_scaleY","rotate","radian","rotation","translate","scaleX","scaleY","dt","isZero","updateWorldBound","propagateBoundToRoot","updateModelSpace","updateModelBound","m20","m21","m22","atan2","translation","sMat","rMat","sx","sy","copyFrom","toIdentity","toZero","toPrecision","vertices","_vertices","_transform","_isAABBDirty","_frames","_currentFrame","frame","stop"],"mappings":"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","file":"nano.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","export class Point\n{\n    public static get ZERO(): Point\n    {\n        return new Point(0, 0);\n    }\n\n    public static get ONE(): Point\n    {\n        return new Point(1, 1);\n    }\n\n    public static get AXIS_X(): Point\n    {\n        return new Point(1, 0);\n    }\n\n    public static get AXIS_Y(): Point\n    {\n        return new Point(0, 1);\n    }\n\n    public x:number;\n    public y:number;\n\n    constructor(x:number = 0, y:number = 0)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    public add(p:Point): void\n    {\n        this.x += p.x;\n        this.y += p.y;\n    }\n\n    public subtract(p:Point): void\n    {\n        this.x -= p.x;\n        this.y -= p.y;\n    }\n\n    public multiply(p:Point): void\n    {\n        this.x *= p.x;\n        this.y *= p.y;\n    }\n\n    public divide(p:Point): void\n    {\n        this.x /= p.x;\n        this.y /= p.y;\n    }\n\n    public scale(scalar:number): void\n    {\n        this.x *= scalar;\n        this.y *= scalar;\n    }\n\n    public dot(p:Point): number\n    {\n        return this.x * p.x + this.y * p.y;\n    }\n\n    public reflection(normal:Point): Point\n    {\n        let n = normal.clone();\n        let t = this.clone();\n\n        let dotN = t.dot(n);\n        n.scale(dotN);\n        n.scale(2);\n        t.subtract(n);\n\n        return t;\n    }\n\n    public invert()\n    {\n        this.x *= -1;\n        this.y *= -1;\n    }\n\n    public normalize()\n    {\n        if(length < Number.EPSILON)\n        {\n            this.x = 0;\n            this.y = 0;\n        }\n        else\n        {\n            let invLength = 1 / length;\n            this.x *= invLength;\n            this.y *= invLength;\n        }\n    }\n\n    public squaredLength(): Number\n    {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    public length(): Number\n    {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    public set(x:number, y:number):void\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    public clone():Point\n    {\n        return new Point(this.x, this.y);\n    }\n\n    public get isZero():boolean\n    {\n        return (this.x == 0 && this.y == 0);\n    }\n\n    public get isOne():boolean\n    {\n        return (this.x == 1 && this.y == 1);\n    }\n\n    public toString():string\n    {\n        return `[Point] (x:${this.x.toFixed(5)}, y:${this.y.toFixed(5)})`\n    }\n}","export class Timer\n{\n    // TODO complete timer system\n    public static deltaSeconds:number = 0;\n}","import { Color } from \"./Color\";\nimport { Container } from \"./Container\";\nimport { Timer } from \"Utils/Timer\";\n\nexport class Stage\n{\n    private static _instance: Stage;\n\n    private _canvas:HTMLCanvasElement;\n    private _context:CanvasRenderingContext2D;\n    \n    private _clearColor:Color = new Color(0.3, 0.6, 0.9);\n    private _framerate:number = 30;\n    private _debug:boolean = false;;\n\n    private _lastUpdate:number = 0;\n    private _accumulator:number = 0;\n    private _updateInterval:number = 0;\n\n    private _isPaused:boolean;\n    private _isFocussed:boolean;\n\n    private _root:Container;\n\n    public static init(width:number, height:number, clearColor:Color = null, framerate:number = 30, debug:boolean = false):Stage\n    {\n        if(this._instance == null)\n        {\n            this._instance = new Stage();\n        }\n\n        let instance = this._instance;\n\n        clearColor == null ? instance._clearColor = new Color(0.3, 0.6, 0.9, 1) \n                           : instance._clearColor = clearColor;\n        instance.framerate = framerate;\n        instance._debug = debug;\n\n        instance._canvas = document.createElement('canvas');\n        instance._context = instance._canvas.getContext(\"2d\");\n        instance._canvas.width = width;\n        instance._canvas.height = height;\n\n        instance._root = new Container();\n        instance._root.name = \"__root\";\n\n        // testing\n        document.body.appendChild(instance._canvas);\n\n        instance.clear();\n        instance._lastUpdate = Date.now();\n        instance.addEventListeners();\n        instance.updateAnimationFrame();\n\n        return instance;\n    }\n\n    public static get context():CanvasRenderingContext2D\n    {\n        return Stage._instance._context;\n    }\n\n    public play():void\n    {\n        this._lastUpdate = Date.now();\n        this._isPaused = false;\n    }\n\n    public pause():void\n    {\n        this._isPaused = true;\n    }\n\n    private addEventListeners():void\n    {\n        let canvas = this.instance._canvas;\n\n        canvas.onclick = this.instance._onClick;\n        canvas.onmousedown = this.instance._onMouseDown;\n        canvas.onmouseup = this.instance._onMouseUp;\n        canvas.onmousemove = this.instance._onMouseMove;\n        canvas.ontouchstart = this.instance._onTouchStart;\n        canvas.ontouchend = this.instance._onTouchEnd;\n        \n        window.onblur = this.instance._onBlur;\n        window.onfocus = this.instance._onFocus;\n    }\n\n    private _onTouchStart(e:TouchEvent):void\n    {\n        console.log(\"TouchStart\");\n    }\n\n    private _onTouchEnd(e:TouchEvent):void\n    {\n        console.log(\"TouchEnd\");\n    }\n\n    private _onClick(e:MouseEvent):void\n    {\n        console.log(\"Click\");\n    }\n\n    private _onMouseDown(e:MouseEvent):void\n    {\n        console.log(\"MouseDown\");\n    }\n\n    private _onMouseUp(e:MouseEvent):void\n    {\n        console.log(\"MouseUp\");\n    }\n\n    private _onMouseMove(e:MouseEvent):void\n    {\n        console.log(\"MouseMove\");\n    }\n\n    private _onBlur(e:Event):void\n    {\n        if(!this._isPaused)\n        {\n            this._isFocussed = false;\n            Stage._instance.pause();\n        }\n    }\n\n    private _onFocus(e:Event):void\n    {\n        if(!this._isFocussed)\n        {\n            this._isFocussed = true;\n            Stage._instance.play();\n        }\n    }\n\n    public get instance():Stage\n    {\n        return Stage._instance;\n    }\n\n    public domElement():CanvasRenderingContext2D\n    {\n        return this._context;\n    }\n\n    public get framerate():number\n    {\n        return this._framerate;\n    }\n\n    public get root():Container\n    {\n        return this._root;\n    }\n\n    public set framerate(value:number)\n    {\n        this._framerate = value;\n        this._updateInterval = 1/this._framerate;\n    }\n\n    public get clearColor():Color\n    {\n        return this._clearColor;\n    }\n\n    public set clearColor(value:Color)\n    {\n        this._clearColor = value;\n    }\n\n    public updateAnimationFrame():void\n    {\n        let instance = Stage._instance;\n\n        window.requestAnimationFrame(instance.updateAnimationFrame);\n\n        if(!instance._isPaused)\n        {\n            let currentTime:number = Date.now();\n            let delta = (currentTime - instance._lastUpdate) / 1000;\n\n            Timer.deltaSeconds = delta;\n\n            instance._accumulator += delta;\n            while(instance._accumulator >= instance._updateInterval)\n            {\n                instance.update(delta);\n                instance._accumulator -= instance._updateInterval;\n            }\n            instance._lastUpdate = currentTime;\n        }\n    }\n\n    public update(applicationTime:number):void\n    {\n        let instance = Stage._instance;\n\n        instance.resetCanvasState();\n        instance.clear();\n\n        // TODO update tweener\n        instance._root.update(true);\n        instance._root.draw();\n\n        if(instance._debug)\n        {\n            instance._root.drawDebug();\n        }\n\n        // TODO onEnterFrame;\n    }\n\n    private resetCanvasState():void\n    {\n        this._context.resetTransform();\n        this._context.globalAlpha = 1;\n        this._context.imageSmoothingEnabled = true;\n        this._context.globalCompositeOperation = 'source-over';\n    }\n\n    public clear():void\n    {\n        this._context.fillStyle = this._clearColor.toHexRGB();\n        this._context.fillRect(0, 0, this._canvas.width, this._canvas.height);\n    }\n}","export class Color\n{\n    private _red:number;\n    private _green:number;\n    private _blue:number;\n    private _alpha:number;\n\n    constructor(red:number = 0, green:number = 0, blue:number = 0, alpha:number = 1)\n    {\n        this._red = red;\n        this._green = green;\n        this._blue = blue;\n        this._alpha = alpha;\n    }\n\n    public get red():number\n    {\n        return this._red;\n    }\n\n    public get green():number\n    {\n        return this._green;\n    }\n\n    public get blue():number\n    {\n        return this._blue;\n    }\n\n    public get alpha():number\n    {\n        return this._alpha;\n    }\n\n    public static get RED():Color\n    {\n        return new Color(1, 0, 0, 1);\n    }\n\n    public toHexRGB():string\n    {\n        let red: number = Math.floor(this._red * 255);\n        let green: number = Math.floor(this._green * 255);\n        let blue: number = Math.floor(this._blue * 255);\n\n        return \"#\" + red.toString(16).padStart(2, '0') +\n                     green.toString(16).padStart(2, '0') +\n                     blue.toString(16).padStart(2, '0');\n    }\n\n    public toHexRGBA():string\n    {\n        let red: number = Math.floor(this._red * 255);\n        let green: number = Math.floor(this._green * 255);\n        let blue: number = Math.floor(this._blue * 255);\n        let alpha: number = Math.floor(this._alpha * 255);\n\n        return \"#\" + red.toString(16).padStart(2, '0') +\n                     green.toString(16).padStart(2, '0') +\n                     blue.toString(16).padStart(2, '0') +\n                     alpha.toString(16).padStart(2, '0');\n    }\n}","import { Spatial } from \"./Spatial\";\n\nexport class Container extends Spatial\n{\n    protected _children:Spatial[];\n\n    constructor()\n    {\n        super();\n        this._children = [];\n    }\n\n    public dispose()\n    {\n        this.removeAllChildren();\n        super.dispose();\n    }\n\n    public get children():Spatial[]\n    {\n        return this._children;\n    }\n\n    public addChild(spatial:Spatial):void\n    {\n        if(this._children.lastIndexOf(spatial) != -1)\n        {\n            //TODO warn\n            return;\n        }\n        spatial.parent = this;\n        this._children.push(spatial);\n    }\n\n    public removeChild(spatial:Spatial):void\n    {\n        let index = this._children.lastIndexOf(spatial);\n        if(index != -1)\n        {\n            spatial.parent = null;\n            this._children.splice(index, 1);\n        }\n    }\n\n    public removeAllChildren()\n    {\n        for(let child of this._children)\n        {\n            child.parent = null;\n            child.dispose();\n        }\n        this._children = null;\n    }\n\n    // override\n    public updateWorldData():void\n    {\n        super.updateWorldData();\n\n        for(let child of this._children)\n        {\n            child.update(false);\n        }\n    }\n\n    public draw():void\n    {\n        for(let child of this._children)\n        {\n            child.draw();\n        }\n    }\n\n    public drawDebug():void\n    {\n        for(let child of this._children)\n        {\n            child.drawDebug();\n        }\n    }\n\n}","import { Point } from \"./Point\";\nimport { Matrix } from \"./Matrix\";\n\nexport class Transform\n{\n    public static get IDENTITY():Transform\n    {\n        return new Transform();\n    }\n\n    private _scale: Point       = Point.ONE;\n    private _rotation: Matrix   = Matrix.IDENTITY;\n    private _translation: Point = Point.ZERO;\n\n    private _matrix:Matrix      = Matrix.IDENTITY;\n    private _isDirty: boolean   = true;\n\n    constructor()\n    {\n    }\n\n    public setScale(x:number, y:number):void\n    {\n        this._scale.x = x;\n        this._scale.y = y;\n        this._isDirty = true;\n    }\n\n    public setTranslate(x:number, y:number):void\n    {\n        this._translation.x = x;\n        this._translation.y = y;\n        this._isDirty = true;\n    }\n\n    public setRotate(radians:number):void\n    {\n        let c:number = Math.cos(radians);\n        let s:number = Math.sin(radians);\n        this._rotation.set(c, -s, 0,\n                           s, c, 0,\n                           0, 0, 1);\n        this._isDirty = true;\n    }\n\n    public get scaleX():number\n    {\n        return this._scale.x;\n    }\n\n    public set scaleX(value:number)\n    {\n        this._scale.x = value;\n        this._isDirty = true;\n    }\n\n    public get scaleY():number\n    {\n        return this._scale.y;\n    }\n\n    public set scaleY(value:number)\n    {\n        this._scale.y = value;\n        this._isDirty = true;\n    }\n\n    public get scale():Point\n    {\n        return this._scale;\n    }\n\n    public set scale(value:Point)\n    {\n        this._scale = value;\n        this._isDirty = true;\n    }\n\n    public get rotation(): Matrix\n    {\n        return this._rotation;\n    }\n\n    public set rotation(value:Matrix)\n    {\n        this._rotation = value;\n        this._isDirty = true;\n    }\n\n    public get translation():Point\n    {\n        return this._translation;\n    }\n\n    public set translation(value:Point)\n    {\n        this._translation = value;\n        this._isDirty = true;\n    }\n    \n    public static multiply(lhs:Transform, rhs:Transform):Transform\n    {\n        let m:Matrix = Matrix.multiply(lhs.matrix, rhs.matrix);\n        let t:Transform = new Transform();\n        t.matrix = m;\n\n        return t;\n    }\n\n    public get matrix():Matrix\n    {\n        if(this._isDirty)\n        {\n            this._matrix.compose(this._scale, this._rotation, this._translation);\n            this._isDirty = false;\n        }\n        return this._matrix;\n    }\n\n    public set matrix(value:Matrix)\n    {\n        this._matrix = value;\n        this._matrix.decompose(this._scale, this._rotation, this._translation);\n        this._isDirty = false;\n    }\n}","import { BlendMode } from \"./BlendMode\";\nimport { Point } from \"Geom/Point\";\nimport { Container } from \"./Container\";\nimport { Matrix } from \"Geom/Matrix\";\nimport { Stage } from \"./Stage\";\nimport { Color } from \"./Color\";\nimport { AnchorType } from \"./AnchorType\";\n\nexport class Sprite extends Container\n{\n    public alpha:number = 1;\n    public smoothing:boolean = true;\n    public blendMode:BlendMode = BlendMode.SOURCE_OVER;\n\n    public pivot:Point = Point.ZERO;\n\n    protected _targetCanvas:HTMLCanvasElement;\n    protected _targetContext:CanvasRenderingContext2D;\n\n    public canvas:HTMLCanvasElement;\n    public graphics:CanvasRenderingContext2D;\n\n    protected _tint:Color;\n    protected _image:HTMLImageElement;\n    protected _mask:HTMLImageElement;\n\n    // TODO Dynamic allocation\n    private _width:number = 100;\n    private _height:number = 100;\n\n    protected _isDirty:boolean = true;\n\n    public get targetContext():CanvasRenderingContext2D\n    {\n        return this._targetContext;\n    }\n\n    public get targetCanvas():HTMLCanvasElement\n    {\n        return this._targetCanvas;\n    }\n\n    constructor()\n    {\n        super();\n\n        this._targetCanvas = document.createElement('canvas') as HTMLCanvasElement;\n        this._targetContext = this._targetCanvas.getContext('2d');\n\n        this.canvas = document.createElement('canvas') as HTMLCanvasElement;\n        this.graphics = this.canvas.getContext('2d');\n\n        this._image = document.createElement('img');\n        this._image.onload = () => { this._isDirty = true; };\n        this._image.onerror = () => { this._image.src = \"\"; }\n\n        this._mask = document.createElement('img');\n        this._mask.onload = () => { this._isDirty = true; };\n        this._mask.onerror = () => { this._mask.src = \"\"; }\n    }\n\n    public dispose():void\n    {\n\n    }\n\n    //override\n    public update(initiator:boolean = true):void\n    {\n        // TODO update model space\n\n        super.update(initiator);\n    }\n\n    // override\n    public draw():void\n    {\n        if(this.alpha < Number.EPSILON)\n        {\n            return;\n        }\n\n        if(this._isDirty)\n        {\n            this.redraw();\n        }\n\n        let context:CanvasRenderingContext2D = Stage.context;\n        let m:Matrix = this.worldTransform.matrix;\n\n        context.globalAlpha = this.alpha;\n        context.imageSmoothingEnabled = this.smoothing;\n        context.globalCompositeOperation = this.blendMode;\n        context.setTransform(m.m00, m.m10, m.m01, m.m11, m.m02, m.m12);\n\n        let target:CanvasRenderingContext2D = this._targetContext;\n        target.globalAlpha = this.alpha;\n        context.drawImage(target.canvas, -this.pivot.x, -this.pivot.y);\n        \n        super.draw();\n    }\n\n    private redraw():void\n    {\n        let ctx = this._targetContext;\n        ctx.clearRect(0, 0, this._width, this._height);\n        ctx.globalAlpha = 1;\n        ctx.imageSmoothingEnabled = this.smoothing;\n        ctx.globalCompositeOperation = this.blendMode;\n\n        ctx.drawImage(this.graphics.canvas, 0, 0, this._width, this._height);\n        \n        if(this._image.src != \"\" || this._image.src != null)\n        {\n            ctx.drawImage(this._image, 0, 0, this._width, this._height);\n        }\n\n        if(this._tint != null)\n        {\n            ctx.globalAlpha = 1;\n\n            ctx.globalCompositeOperation = BlendMode.SOURCE_ATOP;\n            ctx.fillStyle = this._tint.toHexRGBA();\n            ctx.fillRect(0, 0, this._width, this._height);\n        }\n\n        if(this._mask.src != \"\" || this._mask.src != null)\n        {\n            ctx.globalAlpha = 1;\n            ctx.globalCompositeOperation = BlendMode.DESTINATION_IN;\n            ctx.drawImage(this._mask, 0, 0, this._width, this._height);\n        }\n\n        this._isDirty = false;\n    }\n\n    public set mask(value:string)\n    {\n        this._mask.src = value;\n    }\n\n    public set image(value:string)\n    {\n        this._image.src = value;\n    }\n\n    public get image():string\n    {\n        return this._image.src;\n    }\n    \n    public get tint():Color\n    {\n        return this._tint;\n    }\n\n    public set tint(value:Color)\n    {\n        this._tint = value;\n        this._isDirty = true;\n    }\n\n    public get width():number\n    {\n        return this._width;\n    }\n\n    public set width(value:number)\n    {\n        this._width = value;\n        this._isDirty = true;\n    }\n\n    public get height():number\n    {\n        return this._height;\n    }\n\n    public set height(value:number)\n    {\n        this._height = value;\n        this._isDirty = true;\n    }\n\n    public set anchor(value:AnchorType)\n    {\n        let width:number = this._width;\n        let height:number = this._height;\n        let halfWidth:number = this._width / 2;\n        let halfHeight:number = this._height / 2;\n\n        switch(value)\n        {\n            case AnchorType.TOP_LEFT:\n                this.pivot.set(0, 0);\n            break;\n            case AnchorType.TOP_CENTER:\n                this.pivot.set(halfWidth, 0);\n            break;\n            case AnchorType.TOP_RIGHT:\n                this.pivot.set(width, 0);\n            break;\n            case AnchorType.CENTER_LEFT:\n                this.pivot.set(0, halfHeight);\n            break;\n            case AnchorType.CENTER:\n                this.pivot.set(halfWidth, halfHeight);\n            break;\n            case AnchorType.CENTER_RIGHT:\n                this.pivot.set(width, halfHeight);\n            break;\n            case AnchorType.BOTTOM_LEFT:\n                this.pivot.set(0, height);\n            break;\n            case AnchorType.BOTTOM_CENTER:\n                this.pivot.set(halfWidth, height);\n            break;\n            case AnchorType.BOTTOM_RIGHT:\n                this.pivot.set(width, height);\n            break;\n        }\n    }\n}","export enum BlendMode\n{\n    SOURCE_OVER = \"source-over\",\n    SOURCE_IN = \"source-in\",\n    SOURCE_OUT = \"source-out\",\n    SOURCE_ATOP = \"source-atop\",\n    DESTINATION_OVER = \"destination-over\",\n    DESTINATION_IN = \"destination-in\",\n    DESTINATION_OUT = \"destination-out\",\n    DESTINATION_ATOP = \"destination-atop\",\n    LIGHTER = \"lighter\",\n    COPY = \"copy\",\n    XOR = \"xor\",\n    MULTIPLY = \"multiply\",\n    SCREEN = \"screen\",\n    OVERLAY = \"overlay\",\n    DARKEN = \"darken\",\n    LIGHTEN = \"lighten\",\n    COLOR_DODGE = \"color-dodge\",\n    COLOR_BURN = \"color-burn\",\n    HARD_LIGHT = \"hard-light\",\n    SOFT_LIGHT = \"soft-light\",\n    DIFFERENCE = \"difference\",\n    EXCLUSION = \"exclusion\",\n    HUE = \"hue\",\n    SATURATION = \"saturation\",\n    COLOR = \"color\",\n    LUMINOSITY = \"luminosity\"\n}","export enum AnchorType\n{\n    NONE,\n    BOTTOM_CENTER,\n    BOTTOM_LEFT,\n    BOTTOM_RIGHT,\n    CENTER,\n    CENTER_LEFT,\n    CENTER_RIGHT,\n    TOP_CENTER,\n    TOP_LEFT,\n    TOP_RIGHT\n}","import { Stage } from \"Display/Stage\"\nimport { Color } from \"Display/Color\";\nimport { Sprite } from \"Display/Sprite\";\nimport { BlendMode } from \"Display/BlendMode\";\nimport { AnchorType } from \"Display/AnchorType\";\nimport { MovieClip } from \"Display/MovieClip\";\n\nlet clearColor:Color = new Color(0.3, 0.6, 0.9, 1);\nlet stage:Stage = Stage.init(800, 600, clearColor, 30, true);\n\nlet bunny:Sprite = new Sprite();\nbunny.blendMode = BlendMode.SOURCE_OVER;\nbunny.anchor = AnchorType.CENTER;\nbunny.scale(1.5, 1.5);\nbunny.smoothing = false;\nbunny.graphics.fillStyle = '#FF0000';\nbunny.graphics.fillRect(0, 0, 100, 100);\nbunny.image = \"./assets/bunny.png\";\nbunny.tint = new Color(1, 1, 0, 0.5);\nbunny.x = 300;\nbunny.y = 300;\nbunny.rotationSpeed = 1;\nbunny.update();\n\nlet star:Sprite = new Sprite();\nstar.blendMode = BlendMode.COLOR_BURN;\nstar.x = 30;\nstar.y = 30;\nstar.alpha = 0.75;\nstar.tint = new Color(1, 0, 0, 0.5);\nstar.smoothing = false;\nstar.anchor = AnchorType.CENTER;\nstar.image = \"./assets/star.png\";\nstar.rotationSpeed = 2;\n\nbunny.addChild(star);\nstage.root.addChild(bunny);\n\nlet frames:Sprite[] = [bunny, star];\nlet mc:MovieClip = new MovieClip();\nmc.blendMode = BlendMode.COLOR_BURN;\nmc.anchor = AnchorType.CENTER;\nmc.rotationSpeed = -4;\nmc.x = 100;\nmc.y = 100;\nmc.framerate = 2;\nmc.tint = new Color(1, 0, 0, 0.8);\nmc.frames = frames;\nstage.root.addChild(mc);","import { Transform } from \"Geom/Transform\";\nimport { Bound } from \"./Bound\";\nimport { Point } from \"Geom/Point\";\nimport { Timer } from \"Utils/Timer\";\n\nexport abstract class Spatial\n{\n    public name: string = \"\";\n\n    // internal use only\n    public transform: Transform = Transform.IDENTITY;\n\n    // internal use only\n    public worldTransform: Transform = Transform.IDENTITY;\n\n    protected _worldBoundIsDirty: boolean = true;\n    protected _worldTransformIsDirty: boolean = true;\n\n    protected _parent: Spatial = null;\n\n    // internal use only\n    protected _worldBound:Bound = Bound.IDENTITY;\n    \n    public velocity:Point = Point.ZERO;\n    public rotationSpeed:number = 0;\n\n    private _x:number = 0;\n    private _y:number = 0;\n    private _scaleX:number = 1;\n    private _scaleY:number = 1;\n    private _rotation:number = 0;\n\n    public dispose()\n    {\n\n    }\n\n    public get x():number\n    {\n        return this._x;\n    }\n\n    public set x(value:number)\n    {\n        this._x = value;\n        this._worldTransformIsDirty = true;\n    }\n\n    public get y():number\n    {\n        return this._y;\n    }\n\n    public set y(value:number)\n    {\n        this._y = value;\n        this._worldTransformIsDirty = true;\n    }\n\n    public get scaleX():number\n    {\n        return this._scaleX;\n    }\n\n    public set scaleX(value:number)\n    {\n        this._scaleX = value;\n        this._worldTransformIsDirty = true;\n    }\n\n    public get scaleY():number\n    {\n        return this._scaleY;\n    }\n\n    public set scaleY(value:number)\n    {\n        this._scaleY = value;\n        this._worldTransformIsDirty = true;\n    }\n\n    public get rotation():number\n    {\n        return this._rotation;\n    }\n\n    public set rotation(value:number)\n    {\n        this._rotation = value;\n        this._worldTransformIsDirty = true;\n    }\n\n    public rotate(radian:number):void\n    {\n        this.rotation += radian;\n    }\n\n    public translate(x:number, y:number):void\n    {\n        this.x += x;\n        this.y += y;\n    }\n\n    public scale(x:number, y:number):void\n    {\n        this.scaleX *= x;\n        this.scaleY *= y;\n    }\n\n    public get parent():Spatial\n    {\n        return this._parent;\n    }\n\n    public set parent(value:Spatial)\n    {\n        this._parent = value;\n    }\n\n    public update(initiator:boolean):void\n    {\n        let dt = Timer.deltaSeconds;\n\n        if(!this.velocity.isZero)\n        {\n            this.x += this.velocity.x * dt;\n            this.y += this.velocity.y * dt;\n        }\n\n        if(this.rotationSpeed != 0)\n        {\n            this.rotation += this.rotationSpeed * dt;\n        }\n\n        this.updateWorldData();\n        this.updateWorldBound();\n\n        if(initiator)\n        {\n            this.propagateBoundToRoot();\n        }\n    }\n\n    // virtual\n    protected updateWorldData():void\n    {\n        // TODO updateController(applicationTime);\n\n        if(this._worldTransformIsDirty)\n        {\n            this.transform.setTranslate(this._x, this._y);\n            this.transform.setScale(this._scaleX, this._scaleY);\n            this.transform.setRotate(this._rotation);\n\n            if(this._parent != null)\n            {\n                this.worldTransform = Transform.multiply(this._parent.worldTransform, this.transform);\n            }\n            else\n            {\n                //console.log(this.transform);\n\n                this.worldTransform = this.transform;\n            }\n        }\n    }\n\n    public updateModelSpace():void\n    {\n        this.updateModelBound();\n    }\n\n    public updateModelBound():void\n    {\n        // virtual\n    }\n\n    public updateWorldBound():void\n    {\n        // virtual\n    }\n\n    public propagateBoundToRoot():void\n    {\n        if(this._parent != null)\n        {\n            this._parent.updateWorldBound();\n            this._parent.propagateBoundToRoot();\n        }\n    }\n\n    public draw():void\n    {\n        // virtual\n    }\n\n    public drawDebug():void\n    {\n        // virtual\n    }\n}","import { Point } from \"./Point\";\n\nexport class Matrix\n{\n    public static get IDENTITY():Matrix\n    {\n        return new Matrix(1, 0, 0, 0, 1, 0, 0, 0, 1);\n    }\n\n    public static get ZERO():Matrix\n    {\n        return new Matrix(0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n\n    public m00:number;\n    public m01:number;\n    public m02:number;\n\n    public m10:number;\n    public m11:number;\n    public m12:number;\n\n    public m20:number;\n    public m21:number;\n    public m22:number;\n\n    constructor(m00:number = 1, m01:number = 0, m02:number = 0,\n                m10:number = 0, m11:number = 1, m12:number = 0,\n                m20:number = 0, m21:number = 0, m22:number = 1)\n    {\n        this.m00 = m00;\n        this.m01 = m01;\n        this.m02 = m02;\n\n        this.m10 = m10;\n        this.m11 = m11;\n        this.m12 = m12;\n\n        this.m20 = m20;\n        this.m21 = m21;\n        this.m22 = m22;\n    }\n\n    public get euler(): number\n    {\n        return Math.atan2(-this.m01, this.m00)\n    }\n\n    public static rotation(radians:number): Matrix\n    {\n        let c = Math.cos(radians);\n        let s = Math.sin(radians);\n\n        return new Matrix(c, -s, 0,\n                          s, c, 0,\n                          0, 0, 1);\n    }\n\n    public static scale(scaleX: number, scaleY: number): Matrix\n    {\n        return new Matrix(scaleX, 0, 0,\n                          0, scaleY, 0,\n                          0, 0, 1);\n    }\n\n    public static translation(x:number, y:number): Matrix\n    {\n        return new Matrix(1, 0, x,\n                          0, 1, y,\n                          0, 0, 1);\n    }\n\n    public static multiply(lhs:Matrix, rhs:Matrix):Matrix\n    {\n        return new Matrix(\n            lhs.m00 * rhs.m00 + lhs.m01 * rhs.m10 + lhs.m02 * rhs.m20,\n            lhs.m00 * rhs.m01 + lhs.m01 * rhs.m11 + lhs.m02 * rhs.m21,\n            lhs.m00 * rhs.m02 + lhs.m01 * rhs.m12 + lhs.m02 * rhs.m22,\n\n            lhs.m10 * rhs.m00 + lhs.m11 * rhs.m10 + lhs.m12 * rhs.m20,\n            lhs.m10 * rhs.m01 + lhs.m11 * rhs.m11 + lhs.m12 * rhs.m21,\n            lhs.m10 * rhs.m02 + lhs.m11 * rhs.m12 + lhs.m12 * rhs.m22,\n\n            lhs.m20 * rhs.m00 + lhs.m21 * rhs.m10 + lhs.m22 * rhs.m20,\n            lhs.m20 * rhs.m01 + lhs.m21 * rhs.m11 + lhs.m22 * rhs.m21,\n            lhs.m20 * rhs.m02 + lhs.m21 * rhs.m12 + lhs.m22 * rhs.m22\n        );\n    }\n\n    public compose(scale:Point, rotation: Matrix, translation:Point)\n    {\n        let sMat:Matrix = Matrix.scale(scale.x, scale.y);\n        let rMat:Matrix = Matrix.multiply(sMat, rotation);\n\n        this.set(rMat.m00, rMat.m01, translation.x,\n                 rMat.m10, rMat.m11, translation.y,\n                 0, 0, 1);\n    }\n\n    public decompose(scale:Point, rotation: Matrix, translation:Point)\n    {\n        translation.set(this.m02, this.m12);\n\n        let sx:number = Math.sqrt(this.m00 * this.m00 + this.m01 * this.m01);\n        let sy:number = Math.sqrt(this.m10 * this.m10 + this.m11 * this.m11);\n        scale.set(sx, sy);\n\n        rotation.set(this.m00 / sx, this.m01 / sx, 0,\n                     this.m10 / sy, this.m11 / sy, 0,\n                     0, 0, 1);\n    }\n\n    public set(m00:number, m01:number, m02:number,\n               m10:number, m11:number, m12:number,\n               m20:number, m21:number, m22:number)\n    {\n        this.m00 = m00;\n        this.m01 = m01;\n        this.m02 = m02;\n\n        this.m10 = m10;\n        this.m11 = m11;\n        this.m12 = m12;\n\n        this.m20 = m20;\n        this.m21 = m21;\n        this.m22 = m22;\n    }\n\n    public copyFrom(m:Matrix):void\n    {\n        this.m00 = m.m00;\n        this.m01 = m.m01;\n        this.m02 = m.m02;\n\n        this.m10 = m.m10;\n        this.m11 = m.m11;\n        this.m12 = m.m12;\n\n        this.m20 = m.m20;\n        this.m21 = m.m21;\n        this.m22 = m.m22;\n    }\n\n    public toIdentity(): void\n    {\n        this.set(1, 0, 0,\n                 0, 1, 0,\n                 0, 0, 1);\n    }\n\n    public toZero(): void\n    {\n        this.set(0, 0, 0,\n                 0, 0, 0,\n                 0, 0, 0);\n    }\n\n    public toString(): string\n    {\n        return `[Matrix]\\n`+\n        ` m00: ${this.m00.toPrecision(8)}, m01: ${this.m01.toPrecision(8)}, m02: ${this.m02.toPrecision(8)}\\n`+\n        ` m10: ${this.m10.toPrecision(8)}, m11: ${this.m11.toPrecision(8)}, m12: ${this.m12.toPrecision(8)}\\n`+\n        ` m20: ${this.m20.toPrecision(8)}, m21: ${this.m21.toPrecision(8)}, m22: ${this.m22.toPrecision(8)}`;\n    }\n}","import { Transform } from \"Geom/Transform\";\nimport { Point } from \"Geom/Point\";\n\nexport class Bound\n{\n    private _transform:Transform;\n    private _isAABBDirty:boolean;\n\n    private _vertices:Point[] =\n    [\n        Point.ZERO,\n        Point.ZERO,\n        Point.ZERO,\n        Point.ZERO\n    ];\n\n    constructor(vertices:Point[])\n    {\n        this._transform = Transform.IDENTITY;\n        this._vertices = vertices;\n        this._isAABBDirty = true;\n    }\n\n    public static get IDENTITY():Bound\n    {\n        let vertices:Point[] = [\n            Point.ZERO,\n            Point.ZERO,\n            Point.ONE,\n            Point.ONE\n        ];\n        return new Bound(vertices);\n    }\n}","import { Sprite } from \"./Sprite\";\nimport { Timer } from \"Utils/Timer\";\n\nexport class MovieClip extends Sprite\n{\n    private _frames:Sprite[] = [];\n    private _currentFrame:number = 0;\n\n    private _framerate:number = 30;\n    private _accumulator:number = 0;\n    private _updateInterval:number = 0;\n    private _isPaused:boolean = false;\n\n    constructor()\n    {\n        super();\n    }\n\n    public dispose():void\n    {\n        for(let sprite of this._frames)\n        {\n            sprite.dispose();\n        }\n        super.dispose();\n    }\n\n    public get framerate():number\n    {\n        return this._framerate;\n    }\n\n    public set framerate(value:number)\n    {\n        this._framerate = value;\n        this._updateInterval = 1/value;\n    }\n\n    public get frames()\n    {\n        return this._frames;\n    }\n\n    public set frames(value:Sprite[])\n    {\n        this._frames = value;\n        this.frame = 0;\n    }\n\n    public set frame(frame:number)\n    {\n        this._currentFrame = frame;\n        if(this._frames[this._currentFrame] != null)\n        {\n            this.image = this._frames[this._currentFrame].image;\n        }\n    }\n    \n    public play():void\n    {\n        this._isPaused = false;\n    }\n\n    public stop():void\n    {\n        this._isPaused = true;\n    }\n\n    public update(initiator:boolean = true):void\n    {\n        if(!this._isPaused)\n        {\n            this._accumulator += Timer.deltaSeconds;\n            while(this._accumulator >= this._updateInterval)\n            {\n                this._currentFrame++;\n                if(this._currentFrame >= this._frames.length)\n                {\n                    this._currentFrame = 0;\n                }\n                this._accumulator -= this._updateInterval;\n                this.frame = this._currentFrame;\n            }\n        }\n\n        super.update(initiator);\n    }\n}"],"sourceRoot":""}